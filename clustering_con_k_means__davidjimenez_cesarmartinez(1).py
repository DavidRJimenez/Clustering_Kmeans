# -*- coding: utf-8 -*-
"""Clustering con K-Means​-DavidJimenez-CesarMartinez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4XAZT_Uuu5_MX7F7xAByOeXnAuEPGuH

Estudiantes: David Ricardo Jimenez Nuñez-Cesar Martinez Andrade
"""

# Imports necesarios para que funcione
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler

# Generar datos sintéticos
data, _ = make_blobs(n_samples=500, centers=4, cluster_std=1.2, random_state=42)
data = StandardScaler().fit_transform(data)

# Evaluación de K con método del codo
inertia = []
k_values = range(2, 11)
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(data)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8,5))
plt.plot(k_values, inertia, marker='o', linestyle='-')
plt.xlabel('Número de Clusters k')
plt.ylabel('Inercia')
plt.title('Método del Codo')
plt.show()

# Evaluación con silueta
silhouette_scores = []
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(data)
    score = silhouette_score(data, labels)
    silhouette_scores.append(score)

plt.figure(figsize=(8,5))
plt.plot(k_values, silhouette_scores, marker='s', linestyle='-')
plt.xlabel('Número de Clusters k')
plt.ylabel('Puntuación de Silueta')
plt.title('Puntuación de Silueta vs k')
plt.show()

# Aplicación de K-Means con k óptimo (según el codo y silueta)
k_optimo = k_values[np.argmax(silhouette_scores)]
kmeans = KMeans(n_clusters=k_optimo, random_state=42, n_init=10)
labels = kmeans.fit_predict(data)

# Visualización
centroides_reducidos = pca.transform(kmeans.cluster_centers_)

plt.scatter(reduced_data[:, 0], reduced_data[:, 1], c=labels, cmap='viridis', alpha=0.6)
plt.scatter(centroides_reducidos[:, 0], centroides_reducidos[:, 1], s=200, c='red', marker='X', label='Centroides')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.title(f'Clusters con K-Means (k={k_optimo})')
plt.legend()
plt.show()